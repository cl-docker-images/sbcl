#!/bin/bash

set -ex
declare -a ARCHES
declare -a OSES
declare -a ALPINE_VERSIONS
declare -a DEBIAN_VERSIONS
declare -a INVALID_TUPLES
declare -a UBUNTU_VERSIONS
declare -a VARIANTS
declare -a WINDOWSSERVERCORE_VERSIONS

process_default_env() {
  if [ -f default-values.env ]; then
    local var_name
    local var_value
    while read -r line; do
      var_name="${line%%=*}"
      var_value="${line#*=}"
      if [ -z "${!var_name}" ]; then
        if [ "$var_name" = "ARCHES" ] || [ "$var_name" = "OSES" ] || [ "$var_name" = "ALPINE_VERSIONS" ] || [ "$var_name" = "DEBIAN_VERSIONS" ] || [ "$var_name" = "INVALID_TUPLES" ] || [ "$var_name" = "UBUNTU_VERSIONS" ] || [ "$var_name" = "VARIANTS" ] || [ "$var_name" = "WINDOWSSERVERCORE_VERSIONS" ]; then
          read -a "$var_name" <<< "$var_value"
        else
          eval "$var_name=\$var_value"
          export "${var_name?}"
        fi
      fi
    done < default-values.env
  fi
  if [ -z "$VERSION" ]; then
    VERSION="$LATEST_VERSION"
  fi
}

os_version_sep() {
  if [ "$1" = "alpine" ]; then
    echo ""
  else
    echo "-"
  fi
}

os_latest() {
  case "$1" in
    alpine)
      if [ "$2" = "$ALPINE_LATEST" ]; then
        echo "yes"
      fi
      ;;
    debian)
      if [ "$2" = "$DEBIAN_LATEST" ]; then
        echo "yes"
      fi
      ;;
    ubuntu)
      if [ "$2" = "$UBUNTU_LATEST" ]; then
        echo "yes"
      fi
      ;;
    *)
      exit 1
      ;;
  esac
}

docker_platform() {
  case "$ARCH" in
    amd64)
      echo "linux/amd64"
      ;;
    arm32v7)
      echo "linux/arm/v7"
      ;;
    arm64)
      echo "linux/arm64/v8"
      ;;
    *)
      exit 1
      ;;
  esac
}

docker_namespace_suffix() {
  case "$1" in
    amd64)
      echo "amd64"
      ;;
    arm32v7)
      echo "arm32v7"
      ;;
    arm64)
      echo "arm64v8"
      ;;
    *)
      exit 1
      ;;
  esac
}

build_image_name() {
  echo "${IMAGE_BUILD_NAMESPACE}$(docker_namespace_suffix "$ARCH")/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION$VARIANT_TAG"
}

target_image_name() {
  echo "${IMAGE_TARGET_NAMESPACE}/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION$VARIANT_TAG"
}

pull() {
  local platform
  local base_name
  platform="$(docker_platform)"
  base_name="$(build_image_name)"
  docker pull --platform "$platform" "$base_name" || true
  docker pull --platform "$platform" "$base_name-tmp" || true
  docker pull --platform "$platform" "$base_name-tmp-master" || true
}

build() {
  local platform
  local base_name
  platform="$(docker_platform)"
  base_name="$(build_image_name)"
  docker build --platform "$platform" \
               -t "$base_name$BUILD_TAG_SUFFIX" \
               --cache-from "$base_name" \
               --cache-from "$base_name-tmp" \
               --cache-from "$base_name-tmp-master" \
               --build-arg BUILDKIT_INLINE_CACHE=1 \
               $EXTRA_BUILDARGS \
               -f "$VERSION/$OS_NAME/$OS_VERSION/$ARCH/Dockerfile$VARIANT_DOCKERFILE" \
               "$VERSION/$OS_NAME/$OS_VERSION/$ARCH"
}

tag_for_next_variant() {
  local build_base_name
  local target_base_name
  build_base_name="$(build_image_name)"
  target_base_name="$(target_image_name)"

  docker tag "$build_base_name$BUILD_TAG_SUFFIX" "$target_base_name"
}

push_build_image() {
  local base_name
  base_name="$(build_image_name)"

  docker push "$base_name$BUILD_TAG_SUFFIX"
}

os_latest_version() {
  local var_name
  var_name="${1^^}_LATEST"
  echo "${!var_name}"
}

os_versions() {
  local array_name
  array_name="${1^^}_VERSIONS[@]"
  echo "${!array_name}"
}

tuple_valid() {
  local tuple
  tuple="$1:$2:$3:$4"
  if [ "$1" = "windowsservercore" ] && [ "$4" != "amd64" ]; then
    return 1
  fi
  for invalid_tuple in "${INVALID_TUPLES[@]}"; do
    if [[ "$tuple" =~ ^$invalid_tuple.* ]]; then
      return 1
    fi
  done
  return 0
}

pull_retag_and_push_linux_arch_images() {
  local build_image_name
  local os_sep
  local os_latest_version
  local arch_suffix

  for os in ${OSES[@]}; do
    if [ "$os" = "windowsservercore" ]; then
      continue
    fi
    os_sep="$(os_version_sep "$os")"
    os_latest_version="$(os_latest_version "$os")"

    for os_version in $(os_versions "$os"); do
      for variant in "" ${VARIANTS[@]}; do
        for arch in "${ARCHES[@]}"; do
          if ! tuple_valid "$os" "$os_version" "$variant" "$arch"; then
            continue
          fi
          arch_suffix="$(docker_namespace_suffix "$arch")"
          if [ -n "$variant" ]; then
            variant_tag="-$variant"
          else
            variant_tag=""
          fi
          build_image_name="$IMAGE_BUILD_NAMESPACE$arch_suffix/$IMAGE_NAME:$VERSION-$os$os_sep$os_version$variant_tag-tmp-master"
          docker pull "$build_image_name"
          docker tag "$build_image_name" "$IMAGE_BUILD_NAMESPACE$arch_suffix/$IMAGE_NAME:$VERSION-$os$os_sep$os_version$variant_tag"
          docker push "$IMAGE_BUILD_NAMESPACE$arch_suffix/$IMAGE_NAME:$VERSION-$os$os_sep$os_version$variant_tag"
          if [ "$VERSION" = "$LATEST_VERSION" ]; then
            docker tag "$build_image_name" "$IMAGE_BUILD_NAMESPACE$arch_suffix/$IMAGE_NAME:latest-$os$os_sep$os_version$variant_tag"
            docker push "$IMAGE_BUILD_NAMESPACE$arch_suffix/$IMAGE_NAME:latest-$os$os_sep$os_version$variant_tag"
            docker tag "$build_image_name" "$IMAGE_BUILD_NAMESPACE$arch_suffix/$IMAGE_NAME:$os$os_sep$os_version$variant_tag"
            docker push "$IMAGE_BUILD_NAMESPACE$arch_suffix/$IMAGE_NAME:$os$os_sep$os_version$variant_tag"
          fi

          if [ "$os_version" = "$os_latest_version" ]; then
            docker tag "$build_image_name" "$IMAGE_BUILD_NAMESPACE$arch_suffix/$IMAGE_NAME:$VERSION-$os$variant_tag"
            docker push "$IMAGE_BUILD_NAMESPACE$arch_suffix/$IMAGE_NAME:$VERSION-$os$variant_tag"
            if [ "$VERSION" = "$LATEST_VERSION" ]; then
              docker tag "$build_image_name" "$IMAGE_BUILD_NAMESPACE$arch_suffix/$IMAGE_NAME:latest-$os$variant_tag"
              docker push "$IMAGE_BUILD_NAMESPACE$arch_suffix/$IMAGE_NAME:latest-$os$variant_tag"
              docker tag "$build_image_name" "$IMAGE_BUILD_NAMESPACE$arch_suffix/$IMAGE_NAME:$os$variant_tag"
              docker push "$IMAGE_BUILD_NAMESPACE$arch_suffix/$IMAGE_NAME:$os$variant_tag"
            fi
            if [ "$os" = "$DEFAULT_LINUX_OS" ]; then
              docker tag "$build_image_name" "$IMAGE_BUILD_NAMESPACE$arch_suffix/$IMAGE_NAME:$VERSION$variant_tag"
              docker push "$IMAGE_BUILD_NAMESPACE$arch_suffix/$IMAGE_NAME:$VERSION$variant_tag"
              if [ "$VERSION" = "$LATEST_VERSION" ]; then
                docker tag "$build_image_name" "$IMAGE_BUILD_NAMESPACE$arch_suffix/$IMAGE_NAME:latest$variant_tag"
                docker push "$IMAGE_BUILD_NAMESPACE$arch_suffix/$IMAGE_NAME:latest$variant_tag"
              fi
            fi
          fi
        done
      done
    done
  done
}

create_manifest_for_arches() {
  local tag
  local valid_images
  tag="$1"
  shift
  valid_images=()
  for arch_suffix in "$@"; do
    valid_images+=("$IMAGE_BUILD_NAMESPACE$arch_suffix/$IMAGE_NAME:$tag")
  done
  docker manifest create "$IMAGE_TARGET_NAMESPACE/$IMAGE_NAME:$tag" "${valid_images[@]}"
  docker manifest push -p "$IMAGE_TARGET_NAMESPACE/$IMAGE_NAME:$tag"
}

release_linux_manifests() {
  local os_sep
  local os_latest_version
  local arch_suffix
  local valid_arches

  for os in ${OSES[@]}; do
    if [ "$os" = "windowsservercore" ]; then
      continue
    fi
    os_sep="$(os_version_sep "$os")"
    os_latest_version="$(os_latest_version "$os")"

    for os_version in $(os_versions "$os"); do
      for variant in "" ${VARIANTS[@]}; do
        if [ -n "$variant" ]; then
          variant_tag="-$variant"
        else
          variant_tag=""
        fi
        valid_arches=()
        for arch in "${ARCHES[@]}"; do
          if ! tuple_valid "$os" "$os_version" "$variant" "$arch"; then
            continue
          fi

          arch_suffix="$(docker_namespace_suffix "$arch")"
          valid_arches+=("$arch_suffix")
        done

        create_manifest_for_arches "$VERSION-$os$os_sep$os_version$variant_tag" "${valid_arches[@]}"

        if [ "$VERSION" = "$LATEST_VERSION" ]; then
          create_manifest_for_arches "latest-$os$os_sep$os_version$variant_tag" "${valid_arches[@]}"
          create_manifest_for_arches "$os$os_sep$os_version$variant_tag" "${valid_arches[@]}"
        fi
        if [ "$os_version" = "$os_latest_version" ]; then
          create_manifest_for_arches "$VERSION-$os$variant_tag" "${valid_arches[@]}"
          if [ "$VERSION" = "$LATEST_VERSION" ]; then
            create_manifest_for_arches "latest-$os$variant_tag" "${valid_arches[@]}"
            create_manifest_for_arches "$os$variant_tag" "${valid_arches[@]}"
          fi
        fi
      done
    done
  done
}

release_shared_manifests() {
  local variant_tag
  local arch_suffixes

  arch_suffixes=()
  for arch in "${ARCHES[@]}"; do
    arch_suffixes+=($(docker_namespace_suffix "$arch"))
  done

  for variant in "" "${VARIANTS[@]}"; do
    if [ -n "$variant" ]; then
      variant_tag="-$variant"
    else
      variant_tag=""
    fi
    if [ "$INCLUDE_WINDOWS_IN_MANIFEST" = "yes" ] && tuple_valid windowsservercore "$WINDOWSSERVERCORE_LATEST" "$variant" amd64; then
      create_manifest_for_arches "$VERSION$variant_tag" winamd64 "${arch_suffixes[@]}"
    else
      create_manifest_for_arches "$VERSION$variant_tag" "${arch_suffixes[@]}"
    fi
    if [ "$VERSION" = "$LATEST_VERSION" ]; then
      if [ "$INCLUDE_WINDOWS_IN_MANIFEST" = "yes" ] && tuple_valid windowsservercore "$WINDOWSSERVERCORE_LATEST" "$variant" amd64; then
        create_manifest_for_arches "latest$variant_tag" winamd64 "${arch_suffixes[@]}"
      else
        create_manifest_for_arches "latest$variant_tag" "${arch_suffixes[@]}"
      fi
    fi
  done

}

while getopts v:c:t:o:O:a: opt; do
  case $opt in
    v)
      VERSION="$OPTARG"
      ;;
    c)
      export DOCKER_CONTEXT="$OPTARG"
      ;;
    t)
      VARIANT_TAG="-$OPTARG"
      VARIANT_DOCKERFILE=".$OPTARG"
      ;;
    o)
      OS_NAME="$OPTARG"
      ;;
    O)
      OS_VERSION="$OPTARG"
      ;;
    a)
      ARCH="$OPTARG"
      ;;
  esac
done

shift "$((OPTIND-1))"

process_default_env

case "$1" in
  build|pull|push_build_image|tag_for_next_variant)
    OS_VERSION_SEP="$(os_version_sep "$OS_NAME")"
    ;&
  pull_retag_and_push_linux_arch_images|release_linux_manifests|release_shared_manifests)
    $1
    ;;
  *)
    echo "Unknown command" >&2
    exit 1
    ;;
esac

# Local Variables:
# sh-basic-offset: 2
# End:
