name: Release all images

on: workflow_dispatch

jobs:
  release_images:
    name: Release images
    runs-on: ubuntu-20.04
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
      VERSION: "2.0.9"
    steps:
      - name: Login to Dockerhub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - name: Release Linux Images
        run: |
          create_manifest_for_all_linux_archs () {
            docker manifest create mitmers/sbcl:$1 mitmersamd64:$1 mitmersarm64v8:$1 mitmersarm32v7:$1
            docker manifest push -p mitmers/sbcl:$1
          }
          create_manifest_for_windows () {
            docker manifest create mitmers/sbcl:$1 mitmerswinamd64/sbcl:$1
            docker manifest push -p mitmers/sbcl:$1
          }
          for variant in "" -fancy -build; do
            # Alpine
            for os_version in 3.12 3.11; do
              create_manifest_for_all_linux_arches $VERSION-alpine$os_version$variant
              create_manifest_for_all_linux_arches alpine$os_version$variant
            done
            create_manifest_for_all_linux_archs $VERSION-alpine$variant
            create_manifest_for_all_linux_archs alpine$variant
            # Debian
            for os_version in buster stretch; do
              create_manifest_for_all_linux_arches $VERSION-debian-$os_version$variant
              create_manifest_for_all_linux_arches debian-$os_version$variant
            done
            create_manifest_for_all_linux_archs $VERSION-debian$variant
            create_manifest_for_all_linux_archs debian$variant
            # Ubuntu
            for os_version in focal bionic; do
              create_manifest_for_all_linux_arches $VERSION-ubuntu-$os_version$variant
              create_manifest_for_all_linux_arches ubuntu-$os_version$variant
            done
            create_manifest_for_all_linux_archs $VERSION-ubuntu$variant
            create_manifest_for_all_linux_archs ubuntu$variant
          done
      - name: Release Windows Images
        run: |
          create_manifest_for_windows () {
            docker manifest create mitmers/sbcl:$1 mitmerswinamd64/sbcl:$1
            docker manifest push -p mitmers/sbcl:$1
          }
          create_manifest_for_windows $VERSION-windowsservercore-ltsc2019
          create_manifest_for_windows windowsservercore-ltsc2019
          create_manifest_for_windows $VERSION-windowsservercore
          create_manifest_for_windows windowsservercore

          create_manifest_for_windows $VERSION-windowsservercore-ltsc2019-build
          create_manifest_for_windows windowsservercore-ltsc2019-build
          create_manifest_for_windows $VERSION-windowsservercore-build
          create_manifest_for_windows windowsservercore-build
      - name: Release Shared Tags
        run: |
          for prefix in $VERSION latest; do
            docker manifest create mitmers/sbcl:$prefix mitmersamd64/sbcl:$VERSION-debian-buster mitmersarm64/sbcl:$VERSION-debian-buster mitmersarm32v7/sbcl:$VERSION-debian-buster mitmerswinamd64/sbcl:$VERSION-windowsservercore-ltsc2019
            docker manifest push -p mitmers/sbcl:$prefix
          done
          for prefix in $VERSION-build latest-build; do
            docker manifest create mitmers/sbcl:$prefix mitmersamd64/sbcl:$VERSION-debian-buster-build mitmersarm64/sbcl:$VERSION-debian-buster-build mitmersarm32v7/sbcl:$VERSION-debian-buster-build mitmerswinamd64/sbcl:$VERSION-windowsservercore-ltsc2019-build
            docker manifest push -p mitmers/sbcl:$prefix
          done
          for prefix in $VERSION-fancy latest-fancy; do
            docker manifest create mitmers/sbcl:$prefix mitmersamd64/sbcl:$VERSION-debian-buster-build mitmersarm64/sbcl:$VERSION-debian-buster-build mitmersarm32v7/sbcl:$VERSION-debian-buster-build
            docker manifest push -p mitmers/sbcl:$prefix
          done
