os: linux
dist: focal
language: shell


env:
  global:
    ALPINE_LATEST: "3.12"
    DEBIAN_LATEST: "buster"
    DOCKER_BUILDKIT: "1"
    DOCKER_CLI_EXPERIMENTAL: "enabled"
    IMAGE_NAME: sbcl
    IMAGE_NAMESPACE: mitmers
    UBUNTU_LATEST: "focal"
    VERSION: "2.0.9"

stages:
  - name: build
  - name: deploy
    if: branch = master

services:
  - docker

_var_compute_script: &var_detect_script |
  if [ "$TRAVIS_BRANCH" = "master" ]; then
    TAG_SUFFIX="-tmp-master"
  else
    TAG_SUFFIX="-tmp"
  fi
  export TAG_SUFFIX

  # Compute OS_VERSION_SEP
  if [ "$OS_NAME" = "alpine" ]; then
    OS_VERSION_SEP=""
  else
    OS_VERSION_SEP="-"
  fi
  export OS_VERSION_SEP

  #Compute OS_LATEST
  case "$OS_NAME" in
    alpine)
      if [ "$OS_VERSION" = "$ALPINE_LATEST" ]; then
        OS_LATEST="yes"
        export OS_LATEST
      fi
      ;;
    debian)
      if [ "$OS_VERSION" = "$DEBIAN_LATEST" ]; then
        OS_LATEST="yes"
        export OS_LATEST
      fi
      ;;
    ubuntu)
      if [ "$OS_VERSION" = "$UBUNTU_LATEST" ]; then
        OS_LATEST="yes"
        export OS_LATEST
      fi
      ;;
    *)
      exit 1
      ;;
  esac
  # Compute DOCKER_PLATFORM and IMAGE_ARCH_NAMESPACE
  case "$SIMPLE_ARCH" in
    amd64)
      DOCKER_PLATFORM="linux/amd64"
      IMAGE_ARCH_NAMESPACE="${IMAGE_NAMESPACE}amd64"
      ;;
    arm32v7)
      DOCKER_PLATFORM="linux/arm/v7"
      IMAGE_ARCH_NAMESPACE="${IMAGE_NAMESPACE}arm32v7"
      ;;
    arm64)
      DOCKER_PLATFORM="linux/arm64/v8"
      IMAGE_ARCH_NAMESPACE="${IMAGE_NAMESPACE}arm64v8"
      ;;
    *)
      exit 1
      ;;
  esac
  export DOCKER_PLATFORM
  export IMAGE_ARCH_NAMESPACE


before_install:
  - echo '{"experimental":true}' | sudo tee /etc/docker/daemon.json
  - sudo service docker restart
  - docker info

_nonnightly: &nonnightly
  if: (NOT (type = cron) AND NOT (branch =~ ^nightly-.*$))

_nightly: &nightly
  allow_failures:
    if: NOT (type = cron)
  before_script:
    - mkdir tmp
    - cd tmp
    - git clone https://github.com/sbcl/sbcl.git
    - cd sbcl
    - export IMAGE_BUILDARGS="--build-arg ref=$(git rev-parse HEAD)"
    - cd ../..
    - rm -rf tmp

_nonfancy_job: &nonfancy_job
  stage: build
  script:
    - *var_detect_script
    # Pull the previous images
    - >-
      docker pull
      --platform "$DOCKER_PLATFORM"
      "$IMAGE_ARCH_NAMESPACE/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION"
      || true
    - >-
      docker pull
      --platform "$DOCKER_PLATFORM"
      "$IMAGE_ARCH_NAMESPACE/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION-tmp"
      || true
    - >-
      docker pull
      --platform "$DOCKER_PLATFORM"
      "$IMAGE_ARCH_NAMESPACE/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION-tmp-master"
      || true
    - >-
      docker pull
      --platform "$DOCKER_PLATFORM"
      "$IMAGE_ARCH_NAMESPACE/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION-build"
      || true
    - >-
      docker pull
      --platform "$DOCKER_PLATFORM"
      "$IMAGE_ARCH_NAMESPACE/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION-build-tmp"
      || true
    - >-
      docker pull
      --platform "$DOCKER_PLATFORM"
      "$IMAGE_ARCH_NAMESPACE/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION-build-tmp-master"
      || true
    # Build the stock image
    - >-
      docker build
      --platform "$DOCKER_PLATFORM"
      --pull
      -t "$IMAGE_ARCH_NAMESPACE/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION$TAG_SUFFIX"
      --cache-from "$IMAGE_ARCH_NAMESPACE/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION"
      --cache-from "$IMAGE_ARCH_NAMESPACE/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION-tmp"
      --cache-from "$IMAGE_ARCH_NAMESPACE/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION-tmp-master"
      --build-arg BUILDKIT_INLINE_CACHE=1
      $IMAGE_BUILDARGS
      "$VERSION/$OS_NAME/$OS_VERSION/$SIMPLE_ARCH"
    # Tag this image as the build image refers to it by its non-arch specific
    # name
    - >-
      docker tag
      "$IMAGE_ARCH_NAMESPACE/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION$TAG_SUFFIX"
      "$IMAGE_NAMESPACE/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION"
    # Build the build variant of the image
    - >-
      docker build
      --platform "$DOCKER_PLATFORM"
      -t "$IMAGE_ARCH_NAMESPACE/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION-build$TAG_SUFFIX"
      --cache-from "$IMAGE_ARCH_NAMESPACE/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION-build"
      --cache-from "$IMAGE_ARCH_NAMESPACE/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION-build-tmp"
      --cache-from "$IMAGE_ARCH_NAMESPACE/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION-build-tmp-master"
      --build-arg BUILDKIT_INLINE_CACHE=1
      $IMAGE_BUILDARGS
      -f "$VERSION/$OS_NAME/$OS_VERSION/$SIMPLE_ARCH/Dockerfile.build"
      "$VERSION/$OS_NAME/$OS_VERSION/$SIMPLE_ARCH"
  after_success: |
    if [ -n "$DOCKER_PASSWORD" ]; then
      docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      docker push "$IMAGE_ARCH_NAMESPACE/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION$TAG_SUFFIX"
      docker push "$IMAGE_ARCH_NAMESPACE/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION-build$TAG_SUFFIX"
    fi

_fancy_job: &fancy_job
  stage: build
  script:
    - *var_detect_script
    # Pull the previous images
    - >-
      docker pull
      --platform "$DOCKER_PLATFORM"
      "$IMAGE_ARCH_NAMESPACE/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION-fancy"
      || true
    - >-
      docker pull
      --platform "$DOCKER_PLATFORM"
      "$IMAGE_ARCH_NAMESPACE/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION-fancy-tmp"
      || true
    - >-
      docker pull
      --platform "$DOCKER_PLATFORM"
      "$IMAGE_ARCH_NAMESPACE/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION-fancy-tmp-master"
      || true
    # Build the fancy image
    - >-
      docker build
      --platform "$DOCKER_PLATFORM"
      --pull
      -t "$IMAGE_ARCH_NAMESPACE/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION-fancy$TAG_SUFFIX"
      --cache-from "$IMAGE_ARCH_NAMESPACE/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION-fancy"
      --cache-from "$IMAGE_ARCH_NAMESPACE/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION-fancy-tmp"
      --cache-from "$IMAGE_ARCH_NAMESPACE/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION-fancy-tmp-master"
      --build-arg BUILDKIT_INLINE_CACHE=1
      $IMAGE_BUILDARGS
      -f "$VERSION/$OS_NAME/$OS_VERSION/$SIMPLE_ARCH/Dockerfile.fancy"
      "$VERSION/$OS_NAME/$OS_VERSION/$SIMPLE_ARCH"
  after_success: |
    if [ -n "$DOCKER_PASSWORD" ]; then
      docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      docker push "$IMAGE_ARCH_NAMESPACE/$IMAGE_NAME:$VERSION-$OS_NAME$OS_VERSION_SEP$OS_VERSION-fancy$TAG_SUFFIX"
    fi

jobs:
  include:
    # Regular images
    # Alpine 3.12
    - arch: amd64
      env:
        OS_NAME: alpine
        OS_VERSION: "3.12"
        SIMPLE_ARCH: amd64
      <<: [*nonfancy_job, *nonnightly]
    - arch: arm64
      env:
        OS_NAME: alpine
        OS_VERSION: "3.12"
        SIMPLE_ARCH: arm64
      <<: [*nonfancy_job, *nonnightly]
    - arch: arm64
      env:
        OS_NAME: alpine
        OS_VERSION: "3.12"
        SIMPLE_ARCH: arm32v7
      <<: [*nonfancy_job, *nonnightly]
    # Alpine 3.11
    - arch: amd64
      env:
        OS_NAME: alpine
        OS_VERSION: "3.11"
        SIMPLE_ARCH: amd64
      <<: [*nonfancy_job, *nonnightly]
    - arch: arm64
      env:
        OS_NAME: alpine
        OS_VERSION: "3.11"
        SIMPLE_ARCH: arm64
      <<: [*nonfancy_job, *nonnightly]
    - arch: arm64
      env:
        OS_NAME: alpine
        OS_VERSION: "3.11"
        SIMPLE_ARCH: arm32v7
      <<: [*nonfancy_job, *nonnightly]
    # Debian Buster
    - arch: amd64
      env:
        OS_NAME: debian
        OS_VERSION: "buster"
        SIMPLE_ARCH: amd64
      <<: [*nonfancy_job, *nonnightly]
    - arch: arm64
      env:
        OS_NAME: debian
        OS_VERSION: "buster"
        SIMPLE_ARCH: arm64
      <<: [*nonfancy_job, *nonnightly]
    - arch: arm64
      env:
        OS_NAME: debian
        OS_VERSION: "buster"
        SIMPLE_ARCH: arm32v7
      <<: [*nonfancy_job, *nonnightly]
    # Debian Stretch
    - arch: amd64
      env:
        OS_NAME: debian
        OS_VERSION: "stretch"
        SIMPLE_ARCH: amd64
      <<: [*nonfancy_job, *nonnightly]
    - arch: arm64
      install:
        - unset DOCKER_BUILDKIT
        - sudo apt-get remove -y docker docker.io containerd runc
        - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        - sudo add-apt-repository "deb [arch=arm64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        - sudo apt-get update
        - sudo apt-get install -y docker-ce docker-ce-cli containerd.io
        - sudo apt-get upgrade -y
      env:
        OS_NAME: debian
        OS_VERSION: "stretch"
        SIMPLE_ARCH: arm64
      <<: [*nonfancy_job, *nonnightly]
    - arch: arm64
      env:
        OS_NAME: debian
        OS_VERSION: "stretch"
        SIMPLE_ARCH: arm32v7
      <<: [*nonfancy_job, *nonnightly]
    # Ubuntu Focal
    - arch: amd64
      env:
        OS_NAME: ubuntu
        OS_VERSION: "focal"
        SIMPLE_ARCH: amd64
      <<: [*nonfancy_job, *nonnightly]
    - arch: arm64
      env:
        OS_NAME: ubuntu
        OS_VERSION: "focal"
        SIMPLE_ARCH: arm64
      <<: [*nonfancy_job, *nonnightly]
    - arch: arm64
      install:
        - unset DOCKER_BUILDKIT
        - sudo apt-get remove -y docker docker.io containerd runc
        - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        - sudo add-apt-repository "deb [arch=arm64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        - sudo apt-get update
        - sudo apt-get install -y docker-ce docker-ce-cli containerd.io
      env:
        OS_NAME: ubuntu
        OS_VERSION: "focal"
        SIMPLE_ARCH: arm32v7
      <<: [*nonfancy_job, *nonnightly]
    # Ubuntu Bionic
    - arch: amd64
      env:
        OS_NAME: ubuntu
        OS_VERSION: "bionic"
        SIMPLE_ARCH: amd64
      <<: [*nonfancy_job, *nonnightly]
    - arch: arm64
      env:
        OS_NAME: ubuntu
        OS_VERSION: "bionic"
        SIMPLE_ARCH: arm64
      <<: [*nonfancy_job, *nonnightly]
    - arch: arm64
      env:
        OS_NAME: ubuntu
        OS_VERSION: "bionic"
        SIMPLE_ARCH: arm32v7
      <<: [*nonfancy_job, *nonnightly]

    # Fancy images
    # Alpine 3.12
    - arch: amd64
      env:
        OS_NAME: alpine
        OS_VERSION: "3.12"
        SIMPLE_ARCH: amd64
      <<: [*fancy_job, *nonnightly]
    - arch: arm64
      env:
        OS_NAME: alpine
        OS_VERSION: "3.12"
        SIMPLE_ARCH: arm64
      <<: [*fancy_job, *nonnightly]
    - arch: arm64
      env:
        OS_NAME: alpine
        OS_VERSION: "3.12"
        SIMPLE_ARCH: arm32v7
      <<: [*fancy_job, *nonnightly]
    # Alpine 3.11
    - arch: amd64
      env:
        OS_NAME: alpine
        OS_VERSION: "3.11"
        SIMPLE_ARCH: amd64
      <<: [*fancy_job, *nonnightly]
    - arch: arm64
      env:
        OS_NAME: alpine
        OS_VERSION: "3.11"
        SIMPLE_ARCH: arm64
      <<: [*fancy_job, *nonnightly]
    - arch: arm64
      env:
        OS_NAME: alpine
        OS_VERSION: "3.11"
        SIMPLE_ARCH: arm32v7
      <<: [*fancy_job, *nonnightly]
    # Debian Buster
    - arch: amd64
      env:
        OS_NAME: debian
        OS_VERSION: "buster"
        SIMPLE_ARCH: amd64
      <<: [*fancy_job, *nonnightly]
    - arch: arm64
      env:
        OS_NAME: debian
        OS_VERSION: "buster"
        SIMPLE_ARCH: arm64
      <<: [*fancy_job, *nonnightly]
    - arch: arm64
      env:
        OS_NAME: debian
        OS_VERSION: "buster"
        SIMPLE_ARCH: arm32v7
      <<: [*fancy_job, *nonnightly]
    # Debian Stretch
    - arch: amd64
      env:
        OS_NAME: debian
        OS_VERSION: "stretch"
        SIMPLE_ARCH: amd64
      <<: [*fancy_job, *nonnightly]
    - arch: arm64
      install:
        - unset DOCKER_BUILDKIT
        - sudo apt-get remove -y docker docker.io containerd runc
        - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        - sudo add-apt-repository "deb [arch=arm64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        - sudo apt-get update
        - sudo apt-get install -y docker-ce docker-ce-cli containerd.io
        - sudo apt-get upgrade -y
      env:
        OS_NAME: debian
        OS_VERSION: "stretch"
        SIMPLE_ARCH: arm64
      <<: [*fancy_job, *nonnightly]
    - arch: arm64
      env:
        OS_NAME: debian
        OS_VERSION: "stretch"
        SIMPLE_ARCH: arm32v7
      <<: [*fancy_job, *nonnightly]
    # Ubuntu Focal
    - arch: amd64
      env:
        OS_NAME: ubuntu
        OS_VERSION: "focal"
        SIMPLE_ARCH: amd64
      <<: [*fancy_job, *nonnightly]
    - arch: arm64
      env:
        OS_NAME: ubuntu
        OS_VERSION: "focal"
        SIMPLE_ARCH: arm64
      <<: [*fancy_job, *nonnightly]
    - arch: arm64
      install:
        - unset DOCKER_BUILDKIT
        - sudo apt-get remove -y docker docker.io containerd runc
        - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        - sudo add-apt-repository "deb [arch=arm64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        - sudo apt-get update
        - sudo apt-get install -y docker-ce docker-ce-cli containerd.io
      env:
        OS_NAME: ubuntu
        OS_VERSION: "focal"
        SIMPLE_ARCH: arm32v7
      <<: [*fancy_job, *nonnightly]
    # Ubuntu Bionic
    - arch: amd64
      env:
        OS_NAME: ubuntu
        OS_VERSION: "bionic"
        SIMPLE_ARCH: amd64
      <<: [*fancy_job, *nonnightly]
    - arch: arm64
      env:
        OS_NAME: ubuntu
        OS_VERSION: "bionic"
        SIMPLE_ARCH: arm64
      <<: [*fancy_job, *nonnightly]
    - arch: arm64
      env:
        OS_NAME: ubuntu
        OS_VERSION: "bionic"
        SIMPLE_ARCH: arm32v7
      <<: [*fancy_job, *nonnightly]

    # Nightly jobs
    # Alpine 3.12
    - arch: amd64
      env:
        OS_NAME: alpine
        OS_VERSION: "3.12"
        SIMPLE_ARCH: amd64
        VERSION: nightly
      <<: [*nonfancy_job, *nightly]
    - arch: arm64
      env:
        OS_NAME: alpine
        OS_VERSION: "3.12"
        SIMPLE_ARCH: arm64
        VERSION: nightly
      <<: [*nonfancy_job, *nightly]
    - arch: arm64
      env:
        OS_NAME: alpine
        OS_VERSION: "3.12"
        SIMPLE_ARCH: arm32v7
        VERSION: nightly
      <<: [*nonfancy_job, *nightly]
    # Alpine 3.11
    - arch: amd64
      env:
        OS_NAME: alpine
        OS_VERSION: "3.11"
        SIMPLE_ARCH: amd64
        VERSION: nightly
      <<: [*nonfancy_job, *nightly]
    - arch: arm64
      env:
        OS_NAME: alpine
        OS_VERSION: "3.11"
        SIMPLE_ARCH: arm64
        VERSION: nightly
      <<: [*nonfancy_job, *nightly]
    - arch: arm64
      env:
        OS_NAME: alpine
        OS_VERSION: "3.11"
        SIMPLE_ARCH: arm32v7
        VERSION: nightly
      <<: [*nonfancy_job, *nightly]
    # Debian Buster
    - arch: amd64
      env:
        OS_NAME: debian
        OS_VERSION: "buster"
        SIMPLE_ARCH: amd64
        VERSION: nightly
      <<: [*nonfancy_job, *nightly]
    - arch: arm64
      env:
        OS_NAME: debian
        OS_VERSION: "buster"
        SIMPLE_ARCH: arm64
        VERSION: nightly
      <<: [*nonfancy_job, *nightly]
    - arch: arm64
      env:
        OS_NAME: debian
        OS_VERSION: "buster"
        SIMPLE_ARCH: arm32v7
        VERSION: nightly
      <<: [*nonfancy_job, *nightly]
    # Debian Stretch
    - arch: amd64
      env:
        OS_NAME: debian
        OS_VERSION: "stretch"
        SIMPLE_ARCH: amd64
        VERSION: nightly
      <<: [*nonfancy_job, *nightly]
    - arch: arm64
      install:
        - unset DOCKER_BUILDKIT
        - sudo apt-get remove -y docker docker.io containerd runc
        - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        - sudo add-apt-repository "deb [arch=arm64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        - sudo apt-get update
        - sudo apt-get install -y docker-ce docker-ce-cli containerd.io
        - sudo apt-get upgrade -y
      env:
        OS_NAME: debian
        OS_VERSION: "stretch"
        SIMPLE_ARCH: arm64
        VERSION: nightly
      <<: [*nonfancy_job, *nightly]
    - arch: arm64
      env:
        OS_NAME: debian
        OS_VERSION: "stretch"
        SIMPLE_ARCH: arm32v7
        VERSION: nightly
      <<: [*nonfancy_job, *nightly]
    # Ubuntu Focal
    - arch: amd64
      env:
        OS_NAME: ubuntu
        OS_VERSION: "focal"
        SIMPLE_ARCH: amd64
        VERSION: nightly
      <<: [*nonfancy_job, *nightly]
    - arch: arm64
      env:
        OS_NAME: ubuntu
        OS_VERSION: "focal"
        SIMPLE_ARCH: arm64
        VERSION: nightly
      <<: [*nonfancy_job, *nightly]
    - arch: arm64
      install:
        - unset DOCKER_BUILDKIT
        - sudo apt-get remove -y docker docker.io containerd runc
        - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        - sudo add-apt-repository "deb [arch=arm64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        - sudo apt-get update
        - sudo apt-get install -y docker-ce docker-ce-cli containerd.io
      env:
        OS_NAME: ubuntu
        OS_VERSION: "focal"
        SIMPLE_ARCH: arm32v7
        VERSION: nightly
      <<: [*nonfancy_job, *nightly]
    # Ubuntu Bionic
    - arch: amd64
      env:
        OS_NAME: ubuntu
        OS_VERSION: "bionic"
        SIMPLE_ARCH: amd64
        VERSION: nightly
      <<: [*nonfancy_job, *nightly]
    - arch: arm64
      env:
        OS_NAME: ubuntu
        OS_VERSION: "bionic"
        SIMPLE_ARCH: arm64
        VERSION: nightly
      <<: [*nonfancy_job, *nightly]
    - arch: arm64
      env:
        OS_NAME: ubuntu
        OS_VERSION: "bionic"
        SIMPLE_ARCH: arm32v7
        VERSION: nightly
      <<: [*nonfancy_job, *nightly]

    # Fancy images
    # Alpine 3.12
    - arch: amd64
      env:
        OS_NAME: alpine
        OS_VERSION: "3.12"
        SIMPLE_ARCH: amd64
        VERSION: nightly
      <<: [*fancy_job, *nightly]
    - arch: arm64
      env:
        OS_NAME: alpine
        OS_VERSION: "3.12"
        SIMPLE_ARCH: arm64
        VERSION: nightly
      <<: [*fancy_job, *nightly]
    - arch: arm64
      env:
        OS_NAME: alpine
        OS_VERSION: "3.12"
        SIMPLE_ARCH: arm32v7
        VERSION: nightly
      <<: [*fancy_job, *nightly]
    # Alpine 3.11
    - arch: amd64
      env:
        OS_NAME: alpine
        OS_VERSION: "3.11"
        SIMPLE_ARCH: amd64
        VERSION: nightly
      <<: [*fancy_job, *nightly]
    - arch: arm64
      env:
        OS_NAME: alpine
        OS_VERSION: "3.11"
        SIMPLE_ARCH: arm64
        VERSION: nightly
      <<: [*fancy_job, *nightly]
    - arch: arm64
      env:
        OS_NAME: alpine
        OS_VERSION: "3.11"
        SIMPLE_ARCH: arm32v7
        VERSION: nightly
      <<: [*fancy_job, *nightly]
    # Debian Buster
    - arch: amd64
      env:
        OS_NAME: debian
        OS_VERSION: "buster"
        SIMPLE_ARCH: amd64
        VERSION: nightly
      <<: [*fancy_job, *nightly]
    - arch: arm64
      env:
        OS_NAME: debian
        OS_VERSION: "buster"
        SIMPLE_ARCH: arm64
        VERSION: nightly
      <<: [*fancy_job, *nightly]
    - arch: arm64
      env:
        OS_NAME: debian
        OS_VERSION: "buster"
        SIMPLE_ARCH: arm32v7
        VERSION: nightly
      <<: [*fancy_job, *nightly]
    # Debian Stretch
    - arch: amd64
      env:
        OS_NAME: debian
        OS_VERSION: "stretch"
        SIMPLE_ARCH: amd64
        VERSION: nightly
      <<: [*fancy_job, *nightly]
    - arch: arm64
      install:
        - unset DOCKER_BUILDKIT
        - sudo apt-get remove -y docker docker.io containerd runc
        - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        - sudo add-apt-repository "deb [arch=arm64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        - sudo apt-get update
        - sudo apt-get install -y docker-ce docker-ce-cli containerd.io
        - sudo apt-get upgrade -y
      env:
        OS_NAME: debian
        OS_VERSION: "stretch"
        SIMPLE_ARCH: arm64
        VERSION: nightly
      <<: [*fancy_job, *nightly]
    - arch: arm64
      env:
        OS_NAME: debian
        OS_VERSION: "stretch"
        SIMPLE_ARCH: arm32v7
        VERSION: nightly
      <<: [*fancy_job, *nightly]
    # Ubuntu Focal
    - arch: amd64
      env:
        OS_NAME: ubuntu
        OS_VERSION: "focal"
        SIMPLE_ARCH: amd64
        VERSION: nightly
      <<: [*fancy_job, *nightly]
    - arch: arm64
      env:
        OS_NAME: ubuntu
        OS_VERSION: "focal"
        SIMPLE_ARCH: arm64
        VERSION: nightly
      <<: [*fancy_job, *nightly]
    - arch: arm64
      install:
        - unset DOCKER_BUILDKIT
        - sudo apt-get remove -y docker docker.io containerd runc
        - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        - sudo add-apt-repository "deb [arch=arm64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        - sudo apt-get update
        - sudo apt-get install -y docker-ce docker-ce-cli containerd.io
      env:
        OS_NAME: ubuntu
        OS_VERSION: "focal"
        SIMPLE_ARCH: arm32v7
        VERSION: nightly
      <<: [*fancy_job, *nightly]
    # Ubuntu Bionic
    - arch: amd64
      env:
        OS_NAME: ubuntu
        OS_VERSION: "bionic"
        SIMPLE_ARCH: amd64
        VERSION: nightly
      <<: [*fancy_job, *nightly]
    - arch: arm64
      env:
        OS_NAME: ubuntu
        OS_VERSION: "bionic"
        SIMPLE_ARCH: arm64
        VERSION: nightly
      <<: [*fancy_job, *nightly]
    - arch: arm64
      env:
        OS_NAME: ubuntu
        OS_VERSION: "bionic"
        SIMPLE_ARCH: arm32v7
        VERSION: nightly
      <<: [*fancy_job, *nightly]
    - arch: amd64
      stage: deploy
      env:
        VERSION: nightly
      script:
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        # First, download all the nightly builds, retag them, and push them to
        # the arch specific repos
        - |
          pull_retag_and_push_archs() {
            for variant in "" -fancy -build; do
              for arch in amd64 arm32v7 arm64v8; do
                docker pull ${IMAGE_NAMESPACE}$arch/$IMAGE_NAME:$VERSION-$1$2$variant-tmp-master
                docker tag ${IMAGE_NAMESPACE}$arch/$IMAGE_NAME:$VERSION-$1$2$variant-tmp-master ${IMAGE_NAMESPACE}$arch/$IMAGE_NAME:$VERSION-$1$2$variant
                docker push ${IMAGE_NAMESPACE}$arch/$IMAGE_NAME:$VERSION-$1$2$variant
              done
            done
          }
          # Alpine
          for os_version in 3.12 3.11; do
            pull_retag_and_push_archs alpine $os_version
          done
          for variant in "" -fancy -build; do
            for arch in amd64 arm32v7 arm64v8; do
              docker tag ${IMAGE_NAMESPACE}$arch/$IMAGE_NAME:$VERSION-alpine$ALPINE_LATEST$variant ${IMAGE_NAMESPACE}$arch/$IMAGE_NAME:$VERSION-alpine$variant
              docker push ${IMAGE_NAMESPACE}$arch/$IMAGE_NAME:$VERSION-alpine$variant
            done
          done
          # Debian
          for os_version in -buster -stretch; do
            pull_retag_and_push_archs debian $os_version
          done
          for variant in "" -fancy -build; do
            for arch in amd64 arm32v7 arm64v8; do
              docker tag ${IMAGE_NAMESPACE}$arch/$IMAGE_NAME:$VERSION-debian-$DEBIAN_LATEST$variant ${IMAGE_NAMESPACE}$arch/$IMAGE_NAME:$VERSION-debian$variant
              docker push ${IMAGE_NAMESPACE}$arch/$IMAGE_NAME:$VERSION-debian$variant
            done
          done
          # Ubuntu
          for os_version in -focal -bionic; do
            pull_retag_and_push_archs ubuntu $os_version
          done
          for variant in "" -fancy -build; do
            for arch in amd64 arm32v7 arm64v8; do
              docker tag ${IMAGE_NAMESPACE}$arch/$IMAGE_NAME:$VERSION-ubuntu-$UBUNTU_LATEST$variant ${IMAGE_NAMESPACE}$arch/$IMAGE_NAME:$VERSION-ubuntu$variant
              docker push ${IMAGE_NAMESPACE}$arch/$IMAGE_NAME:$VERSION-ubuntu$variant
            done
          done
        # Next, create and push all the manifests!
        - |
          create_manifest_for_all_linux_archs () {
            docker manifest create "$IMAGE_NAMESPACE/$IMAGE_NAME:$1" ${IMAGE_NAMESPACE}amd64/$IMAGE_NAME:$1 ${IMAGE_NAMESPACE}arm64v8/$IMAGE_NAME:$1 ${IMAGE_NAMESPACE}arm32v7/$IMAGE_NAME:$1
            docker manifest push -p "$IMAGE_NAMESPACE/$IMAGE_NAME:$1"
          }
        - |
          for variant in "" -fancy -build; do
            # Alpine
            for os_version in 3.12 3.11; do
              create_manifest_for_all_linux_archs $VERSION-alpine$os_version$variant
            done
            create_manifest_for_all_linux_archs $VERSION-alpine$variant
            # Debian
            for os_version in buster stretch; do
              create_manifest_for_all_linux_archs $VERSION-debian-$os_version$variant
            done
            create_manifest_for_all_linux_archs $VERSION-debian$variant
            # Ubuntu
            for os_version in focal bionic; do
              create_manifest_for_all_linux_archs $VERSION-ubuntu-$os_version$variant
            done
            create_manifest_for_all_linux_archs $VERSION-ubuntu$variant
          done
