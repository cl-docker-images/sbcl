From f28ebfe8bd95364f6bae7d6278bd81d75343d8bd Mon Sep 17 00:00:00 2001
From: Eric Timmons <etimmons@mit.edu>
Date: Sat, 1 Feb 2020 17:34:21 -0500
Subject: [PATCH 5/5] Only test for O_NONBLOCK in fcntl.1 POSIX contrib test

Platforms may set other flags on the open call, so always test only for the
flag we're interested in instead of testing equality.
---
 contrib/sb-posix/posix-tests.lisp | 12 ++++--------
 1 file changed, 4 insertions(+), 8 deletions(-)

diff --git a/contrib/sb-posix/posix-tests.lisp b/contrib/sb-posix/posix-tests.lisp
index b194aa455..062cff6c4 100644
--- a/contrib/sb-posix/posix-tests.lisp
+++ b/contrib/sb-posix/posix-tests.lisp
@@ -432,14 +432,10 @@ (deftest open.error.1
   #+win32
   #.sb-posix:eacces)
 
-#-(or (and (or x86-64 arm64 ppc64 alpha) (or linux sunos)) win32)
-(deftest fcntl.1
-  (let ((fd (sb-posix:open "/dev/null" sb-posix::o-nonblock)))
-    (= (sb-posix:fcntl fd sb-posix::f-getfl) sb-posix::o-nonblock))
-  t)
-;; On AMD64/Linux O_LARGEFILE is always set, even though the whole
-;; flag makes no sense.
-#+(and (or x86-64 arm64 ppc64 alpha) (or linux sunos))
+;; On some combinations of platforms (e.g., musl libc on any arch; Linux/SunOS
+;; on AMD64, ARM64, PPC64, or Alpha) O_LARGEFILE is always set, even though the
+;; whole flag makes no sense. So test for only O_NONBLOCK bit instead of testing
+;; for equality.
 (deftest fcntl.1
   (let ((fd (sb-posix:open "/dev/null" sb-posix::o-nonblock)))
     (/= 0 (logand (sb-posix:fcntl fd sb-posix::f-getfl)
-- 
2.25.0

